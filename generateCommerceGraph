#!/usr/bin/env groovy

@Grapes([
  @Grab(group='com.redislabs', module='jredisgraph', version='2.0.0'),
  @Grab(group='com.github.javafaker', module='javafaker', version='1.0.1'),
  @Grab(group='org.apache.commons', module='commons-lang3', version='3.9'),
  @Grab(group='org.apache.commons', module='commons-pool2', version='2.8.0'),
  @Grab(group='redis.clients', module='jedis', version='3.2.0'),
  @Grab(group='com.google.guava', module='guava', version='28.1-jre'),
  @Grab(group='com.github.oshi', module='oshi-core', version='4.6.1'),
  @Grab(group='me.tongfei', module='progressbar', version='0.7.3'),
  @Grab(group='org.slf4j', module='slf4j-simple', version='1.7.30'),
])

import groovy.lang.Singleton
import groovy.transform.Canonical
import java.util.concurrent.CountDownLatch
import java.util.concurrent.ConcurrentLinkedQueue
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import java.util.SplittableRandom
import java.time.temporal.ChronoUnit
import java.time.LocalDateTime
import java.math.BigDecimal
import java.math.MathContext
import java.math.RoundingMode
import redis.clients.jedis.JedisPool
import me.tongfei.progressbar.ProgressBar
import com.github.javafaker.Faker
import com.google.common.base.Stopwatch
import com.redislabs.redisgraph.impl.api.RedisGraph
import org.apache.commons.lang3.RandomStringUtils
import org.apache.commons.pool2.impl.GenericObjectPoolConfig
import oshi.SystemInfo

def defaultDB = 'prodrec'
def defaultThreadCount = "${new SystemInfo().hardware.processor.physicalProcessorCount}"
def defaultMaxPotentialViews = '50'
def defaultMinPotentialViews = '0'
def defaultPercentageOfViewsToAddToCart = '25'
def defaultPercentageOfAddToCartToPurchase = '90'
def defaultMaxRandomTimeFromViewToAddToCartInMinutes = '4320'
def defaultMaxRandomTimeFromAddToCartToPurchased = '4320'
def defaultMaxPastDate = "${365 * 20}"
def defaultMaxPotentialPeopleToCreate = '5001'
def defaultMinPotentialPeopleToCreate = '5000'
def defaultMaxPotentialProductsToCreate = '1001'
def defaultMinPotentialProductsToCreate = '1000'
def defaultNodeCreationBatchSize = '500'
def defaultMaxTaxRate = '0.125'
def defaultMinTaxRate = '0.0'
def defaultMaxShipRate = '0.15'
def defaultMinShipRate = '0.0'
def defaultMaxPerProductPrice = '1000.00'
def defaultMinPerProductPrice = '0.99'

def cli = new CliBuilder(header: 'Commerce Graph Generator', usage:'generateCommerceGraph', width: -1)
cli.maxv(longOpt: 'maxPotentialViews', "The max number of potential views a person can have against a product [defaults to ${defaultMaxPotentialViews}]", args: 1, defaultValue: defaultMaxPotentialViews)
cli.minv(longOpt: 'minPotentialViews', "The min number of potential views a person can have against a product [defaults to ${defaultMinPotentialViews}]", args: 1, defaultValue: defaultMinPotentialViews)
cli.peratc(longOpt: 'percentageOfViewsToAddToCart', "The percentage of views to turn into add-to-cart events for a given person and product [defaults to ${defaultPercentageOfViewsToAddToCart}]", args: 1, defaultValue: defaultPercentageOfViewsToAddToCart)
cli.perpur(longOpt: 'percentageOfAddToCartToPurchase', "The percentage of add-to-cart into purchase events for a given person and product [defaults to ${defaultPercentageOfAddToCartToPurchase}]", args: 1, defaultValue: defaultPercentageOfAddToCartToPurchase)
cli.maxatct(longOpt: 'maxRandomTimeFromViewToAddToCartInMinutes', "The max random time from view to add-to-cart for a given user and product [defaults to ${defaultMaxRandomTimeFromViewToAddToCartInMinutes}]", args: 1, defaultValue: defaultMaxRandomTimeFromViewToAddToCartInMinutes)
cli.maxpurt(longOpt: 'maxRandomTimeFromAddToCartToPurchased', "The max random time from add-to-cart to purchased for a given user and product[defaults to ${defaultMaxRandomTimeFromAddToCartToPurchased}]", args: 1, defaultValue: defaultMaxRandomTimeFromAddToCartToPurchased)
cli.maxpd(longOpt: 'maxPastDate', "The max date in the past for the memberSince field of a given user [defaults to ${defaultMaxPastDate}]", args: 1, defaultValue: defaultMaxPastDate)
cli.maxpeeps(longOpt: 'maxPotentialPeopleToCreate', "The max number of people to create [defaults to ${defaultMaxPotentialPeopleToCreate}]", args: 1, defaultValue: defaultMaxPotentialPeopleToCreate)
cli.minpeeps(longOpt: 'minPotentialPeopleToCreate', "The min number of people to create [defaults to ${defaultMinPotentialPeopleToCreate}]", args: 1, defaultValue: defaultMinPotentialPeopleToCreate)
cli.maxprods(longOpt: 'maxPotentialProductsToCreate', "The max number of products to create [defaults to ${defaultMaxPotentialProductsToCreate}]", args: 1, defaultValue: defaultMaxPotentialProductsToCreate)
cli.minprods(longOpt: 'minPotentialProductsToCreate', "The min number of products to create [defaults to ${defaultMinPotentialProductsToCreate}]", args: 1, defaultValue: defaultMinPotentialProductsToCreate)
cli.ncbs(longOpt: 'nodeCreationBatchSize', "The batch size to use for writes when creating people and products [defaults to ${defaultNodeCreationBatchSize}]", args: 1, defaultValue: defaultNodeCreationBatchSize)
cli.maxtax(longOpt: 'maxTaxRate', "The max tax rate for an order [defaults to ${defaultMaxTaxRate}]", args: 1, defaultValue: defaultMaxTaxRate)
cli.mintax(longOpt: 'minTaxRate', "The min tax rate for an order [defaults to ${defaultMinTaxRate}]", args: 1, defaultValue: defaultMinTaxRate)
cli.maxship(longOpt: 'maxShipRate', "The max ship rate for an order [defaults to ${defaultMaxShipRate}]", args: 1, defaultValue: defaultMaxShipRate)
cli.minship(longOpt: 'minShipRate', "The min ship rate for an order [defaults to ${defaultMinShipRate}]", args: 1, defaultValue: defaultMinShipRate)
cli.maxppp(longOpt: 'maxPerProductPrice', "The max price per product [defaults to ${defaultMaxPerProductPrice}]", args: 1, defaultValue: defaultMaxPerProductPrice)
cli.minppp(longOpt: 'minPerProductPrice', "The min price per product [defaults to ${defaultMinPerProductPrice}]", args: 1, defaultValue: defaultMinPerProductPrice)
cli.db(longOpt: 'database', "The RedisGraph database to use for our queries, data generation [defaults to ${defaultDB}]", args: 1, defaultValue: defaultDB)
cli.tc(longOpt: 'threadCount', "The thread count to use [defaults to ${defaultThreadCount}]", args: 1, defaultValue: defaultThreadCount)
cli.h(longOpt: 'help', 'Usage Information')

def cliOptions = cli.parse(args)

if (!cliOptions) {
  cli.usage()
  System.exit(-1)
}

if (cliOptions.help) {
  cli.usage()
  System.exit(0)
}

def printErr = System.err.&println

def validateParams = { variable, min, max ->
  if (min == max) {
    printErr("Min and max values must be discrete. Current for ${variable} are ${min} and ${max}")
    cli.usage()
    System.exit(-1)
  }
}

def maxPotentialViews = cliOptions.maxPotentialViews as Integer
def minPotentialViews = cliOptions.minPotentialViews as Integer
validateParams('Potential Views', minPotentialViews, maxPotentialViews)
def percentageOfViewsToAddToCart = cliOptions.percentageOfViewsToAddToCart as Integer
def percentageOfAddToCartToPurchase = cliOptions.percentageOfAddToCartToPurchase as Integer
def maxRandomTimeFromViewToAddToCartInMinutes = cliOptions.maxRandomTimeFromViewToAddToCartInMinutes as Integer
def maxRandomTimeFromAddToCartToPurchased = cliOptions.maxRandomTimeFromAddToCartToPurchased as Integer
def maxPastDate = cliOptions.maxPastDate as Integer
def maxPotentialPeopleToCreate = cliOptions.maxPotentialPeopleToCreate as Integer
def minPotentialPeopleToCreate = cliOptions.minPotentialPeopleToCreate as Integer
validateParams('Created People', minPotentialPeopleToCreate, maxPotentialPeopleToCreate)
def maxPotentialProductsToCreate = cliOptions.maxPotentialProductsToCreate as Integer
def minPotentialProductsToCreate = cliOptions.minPotentialProductsToCreate as Integer
validateParams('Created Products', minPotentialProductsToCreate, maxPotentialProductsToCreate)
def nodeCreationBatchSize = cliOptions.nodeCreationBatchSize as Integer
def maxTaxRate = cliOptions.maxTaxRate as Double
def minTaxRate = cliOptions.minTaxRate as Double
validateParams('Tax Rate', minTaxRate, maxTaxRate)
def maxShipRate = cliOptions.maxShipRate as Double
def minShipRate = cliOptions.minShipRate as Double
validateParams('Ship Rate', minShipRate, maxShipRate)
def maxPerProductPrice = cliOptions.maxPerProductPrice as Double
def minPerProductPrice = cliOptions.minPerProductPrice as Double
validateParams('Product Price', minPerProductPrice, maxPerProductPrice)

@Singleton class GraphKeys {
  def personNodeType = 'person'
  def productNodeType = 'product'
  def orderNodeType = 'order'
  def viewEdgeType = 'view'
  def addToCartEdgeType = 'addtocart'
  def transactEdgeType = 'transact'
  def containEdgeType = 'contain'
}

def globalOrderIdCounter = new AtomicInteger(0)

def mathContext = new MathContext(2, RoundingMode.HALF_UP)

@Canonical class Person {

  def id
  def name
  def address
  def age
  def memberSince

  def toCypherCreate() {
    "(:${GraphKeys.instance.personNodeType} {id: ${id}, name:\"${name}\",age:${age},address:\"${address}\",memberSince:\"${memberSince}\"})"
  }
}

@Canonical class Product {

  def id
  def name
  def manufacturer
  def msrp

  def toCypherCreate() {
    "(:${GraphKeys.instance.productNodeType} {id: ${id},name:\"${name}\",manufacturer:\"${manufacturer}\",msrp:'${msrp}'})"
  }
}

@Canonical class Order {

  def id
  def subTotal
  def tax
  def shipping
  def total

  def toCypherCreate() {
    "(:${GraphKeys.instance.orderNodeType} {id: ${id},subTotal:${subTotal},tax:${tax},shipping:${shipping},total:${total}})"
  }
}

@Canonical class Event {

  def product
  def type
  def time
}

def random = new SplittableRandom()
def faker = new Faker()

def db = cliOptions.database

def threadCount = cliOptions.threadCount as Integer
def config = new GenericObjectPoolConfig()
config.setMaxTotal(threadCount)

def jedisPool = new JedisPool(config)
def graph = new RedisGraph(jedisPool)

graph.query(db, 'create index on :person(id)')
graph.query(db, 'create index on :product(id)')
graph.query(db, 'create index on :order(id)')

def now = LocalDateTime.now()

def personAndProductBatchedInsertQueue = new ConcurrentLinkedQueue()

def personAndProductLatch = new CountDownLatch(threadCount)

def queue = new ConcurrentLinkedQueue()
def peopleToCreate = random.nextInt(minPotentialPeopleToCreate, maxPotentialPeopleToCreate)
def productsToCreate = random.nextInt(minPotentialProductsToCreate, maxPotentialProductsToCreate)
def generationDone = new AtomicBoolean(false)
def createCount = new AtomicInteger(0)

threadCount.times {

  Thread.start {

    while (personAndProductLatch.count > 0L) {

      def query = personAndProductBatchedInsertQueue.poll()
      def batchCounter = 0
      def batchedInserts = []

      while (query && batchCounter < nodeCreationBatchSize) {
        batchedInserts << query
        batchCounter++
        query = personAndProductBatchedInsertQueue.poll()
      }

      if (batchedInserts) {
        graph.query(db, "CREATE ${batchedInserts.collect { record -> record.toCypherCreate()}.join(',')}")
        createCount.addAndGet(batchedInserts.size())
      }

      if (!query && generationDone.get()) {
        personAndProductLatch.countDown()
      }
    }
  }
}

Thread.start {

  def targetProgress = peopleToCreate + productsToCreate

  new ProgressBar("(:${GraphKeys.instance.personNodeType}) and (:${GraphKeys.instance.productNodeType})", targetProgress, 200).withCloseable { progressBar ->

    while (personAndProductLatch.count > 0L) {
      progressBar.stepTo(createCount.get())
    }

    progressBar.stepTo(targetProgress)
  }
}

def peopleQueueToCreateOrdersAndViewAddToCartAndTransactEdges = new ConcurrentLinkedQueue()
peopleToCreate.times { num ->
  def address = faker.address()
  def person = new Person(id: num, name: "${address.firstName()} ${address.lastName()}", address: address.fullAddress(), age: random.nextInt(10, 100), memberSince: LocalDateTime.now().minusDays(random.nextInt(1, maxPastDate) as Long))
  personAndProductBatchedInsertQueue.offer(person)
  peopleQueueToCreateOrdersAndViewAddToCartAndTransactEdges.offer(person)
}

def products = new ArrayList(productsToCreate)
productsToCreate.times { num ->
  def product = new Product(id: num, name: faker.commerce().productName(), manufacturer: faker.company().name(), msrp: faker.commerce().price(minPerProductPrice, maxPerProductPrice) as Double)
  products << product
  personAndProductBatchedInsertQueue.offer(product)
}

generationDone.set(true)
personAndProductLatch.await()

def edgeAndOrderGenerationLatch = new CountDownLatch(threadCount)

threadCount.times {

  Thread.start { thread ->

    def threadRandom = new SplittableRandom()

    while (!peopleQueueToCreateOrdersAndViewAddToCartAndTransactEdges.empty) {

      def person = peopleQueueToCreateOrdersAndViewAddToCartAndTransactEdges.poll()

      def views = threadRandom.nextInt(minPotentialViews, maxPotentialViews)
      def viewedProducts = [] as Set
      def minutesFromMemberSinceToNow = person.memberSince.until(now, ChronoUnit.MINUTES)

      // generate random value up to max potential views and drop those into a unique set
      views.times {
        viewedProducts << products.get(threadRandom.nextInt(products.size()))
      }

      def viewEvents = viewedProducts.collect { product ->
        new Event(product: product, type: GraphKeys.instance.viewEdgeType, time: person.memberSince.plusMinutes(threadRandom.nextInt(1, minutesFromMemberSinceToNow as Integer) as Long))
      }

      if (viewEvents) {

        // this pulls a percentage of viewed products into add to cart events
        def addedToCartEvents = viewEvents.findAll {
          threadRandom.nextInt(100) <= percentageOfViewsToAddToCart
        }.collect { event ->
          new Event(product: event.product, type: GraphKeys.instance.addToCartEdgeType, time: event.time.plusMinutes(threadRandom.nextInt(1, maxRandomTimeFromViewToAddToCartInMinutes) as Long))
        }

        // purchasedEvents
        def purchasedEvents = addedToCartEvents.findAll {
          threadRandom.nextInt(100) <= percentageOfAddToCartToPurchase
        }

        def addedToCartEventEdges = ''

        if (addedToCartEvents) {

          def joinedAddToCartEdges = addedToCartEvents.collect { event ->
            "(p)-[:${event.type} {time: '${event.time}'}]->(prd${event.product.id})"
          }.join(', ')
          addedToCartEventEdges = ", ${joinedAddToCartEdges}"

          if (purchasedEvents) {

            purchasedEvents.collate(threadRandom.nextInt(0, purchasedEvents.size())).collect { subSetOfPurchasedEvents ->

              def productsInOrder = subSetOfPurchasedEvents.collect { event -> event.product }
              def oldestPurchasedEvent = subSetOfPurchasedEvents.max { event -> event.time }
              def subTotalOfProducts = productsInOrder.collect { product -> product.msrp }.sum()
              def taxAddition = new BigDecimal(subTotalOfProducts, mathContext).multiply(new BigDecimal(threadRandom.nextDouble(minTaxRate, maxTaxRate), mathContext))
              def shipAddition = new BigDecimal(subTotalOfProducts, mathContext).multiply(new BigDecimal(threadRandom.nextDouble(minShipRate, maxShipRate), mathContext))

              def order = new Order(id: globalOrderIdCounter.incrementAndGet(), subTotal: subTotalOfProducts, tax: taxAddition, shipping: shipAddition, total: subTotalOfProducts + taxAddition + shipAddition)

              graph.query(db, "CREATE ${order.toCypherCreate()}")

              // we have to match across all the products
              def productMatchDefinitionParams = productsInOrder.collect { product ->
                "(prd${product.id}:${GraphKeys.instance.productNodeType})"
              }.join(', ')

              def productMatchCriteria = productsInOrder.collect { product ->
                "prd${product.id}.id=${product.id}"
              }.join(' AND ')

              def productEdges = productsInOrder.collect { product ->
                "(o)-[:contain]->(prd${product.id})"
              }.join(', ')

              def query = "MATCH (p:${GraphKeys.instance.personNodeType}), (o:${GraphKeys.instance.orderNodeType}), ${productMatchDefinitionParams} WHERE p.id=${person.id} AND o.id=${order.id} AND ${productMatchCriteria} CREATE (p)-[:${GraphKeys.instance.transactEdgeType}]->(o), ${productEdges}"

              graph.query(db, query)
            }
          }
        }

        // we have to match across all the products
        def productMatchDefinitionParams = viewEvents.collect { event ->
          "(prd${event.product.id}:${GraphKeys.instance.productNodeType})"
        }.join(', ')

        def productMatchCriteria = viewEvents.collect { event ->
          "prd${event.product.id}.id=${event.product.id}"
        }.join(' AND ')

        def viewedEdges = viewEvents.collect { event ->
          "(p)-[:${event.type} {time: '${event.time}'}]->(prd${event.product.id})"
        }.join(', ')

        def query = "MATCH (p:${GraphKeys.instance.personNodeType}), ${productMatchDefinitionParams} WHERE p.id=${person.id} AND ${productMatchCriteria} CREATE ${viewedEdges}${addedToCartEventEdges}"

        graph.query(db, query)
      }
    }

    edgeAndOrderGenerationLatch.countDown()
  }
}

new ProgressBar("(:${GraphKeys.instance.orderNodeType}), [:${GraphKeys.instance.viewEdgeType}], [:${GraphKeys.instance.addToCartEdgeType}], [:${GraphKeys.instance.transactEdgeType}], and [:${GraphKeys.instance.containEdgeType}]", peopleToCreate, 200).withCloseable { progressBar ->

  while (edgeAndOrderGenerationLatch.count > 0L) {
    progressBar.stepTo(peopleToCreate - peopleQueueToCreateOrdersAndViewAddToCartAndTransactEdges.size())
  }
}
